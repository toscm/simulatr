var <- rnorm(3,var=0.3)
mat[i,1:3] <- var
}
}
simulate_dataset()
simulate_dataset()
simulate_dataset <- function(
n=2,
p=3,
#beta=NULL,
#base="HG-U133B",
#family="gaussian",
#cor=0.5,
#cortype=1,
#noise=1,
#noisevar=1,
#bias=0,
#biastype=1
) {
n=2
p=3
mat <- matrix(,n,p)
matvar <- vector()
for (i in 1:3){
var <- rnorm(3)
mat[i,1:3] <- var
}
}
simulate_dataset()
simulate_dataset <- function(
n=2,
p=3,
#beta=NULL,
#base="HG-U133B",
#family="gaussian",
#cor=0.5,
#cortype=1,
#noise=1,
#noisevar=1,
#bias=0,
#biastype=1
) {
n=2
p=3
mat <- matrix(,n,p)
matvar <- vector()
for (i in 1:n){
var <- rnorm(p)
mat[i,1:p] <- var
}
}
simulate_dataset()
simulate()
simulate_dataset()
simulate_dataset(2,3)
simulate_dataset <- function(
n=2,
p=3,
#beta=NULL,
#base="HG-U133B",
#family="gaussian",
#cor=0.5,
#cortype=1,
#noise=1,
#noisevar=1,
#bias=0,
#biastype=1
) {
n=2
p=3
mat <- matrix(,n,p)
matvar <- vector()
for (i in 1:n){
var <- rnorm(p)
mat[i,1:p] <- var
}
return(mat)
}
simulate_dataset(2,3)
mat
#' @export
#' @name simulate_dataset
#' @title Simulate a Dataset
#' @description `simulate_dataset()` returns a dataset of size n*p
#' @param n The number of samples.
#' @param p The number of features.
#' @param beta The model coefficients.
#' @param base The dataset to use as basis for the generation, e.g. HG-U133B
#' for mRNA datasets measured with the Affymetrix HG-U133B microarray.
#' @param family The type of model to use when generating the outcome variable.
#' Either `gaussian`, `binomial` or `cox`.
#' @param cor Correlation strength within the data
#' @param cortype Method to use for generating the correlation within the
#' dataset. See below for details.
#' @param noise Amount of noise to add to each predictor
#' @param noisevar Variance of noise
#' @param bias Amount of bias to simulate
#' @param biastype Method to use for generating the bias. See below for details.
#' @return A matrix of size n*p.
#' @examples
#' \dontrun{
#' x <- simulate_dataset(n=100, p=1000, base="HG-U133B")
#' # should return a matrix of size 100*1000 with genes measured by the
#' # HG-U133B microarray as features
#' }
#' @details to be done
simulate_dataset <- function(
n=3,
p=4,
#beta=NULL,
#base="HG-U133B",
#family="gaussian",
#cor=0.5,
#cortype=1,
#noise=1,
#noisevar=1,
#bias=0,
#biastype=1
) {
n=2
p=3
mat <- matrix(,n,p)
matvar <- vector()
for (i in 1:n){
var <- rnorm(p)
mat[i,1:p] <- var
}
return(mat)
}
#' @export
#' @name simulate_dataset
#' @title Simulate a Dataset
#' @description `simulate_dataset()` returns a dataset of size n*p
#' @param n The number of samples.
#' @param p The number of features.
#' @param beta The model coefficients.
#' @param base The dataset to use as basis for the generation, e.g. HG-U133B
#' for mRNA datasets measured with the Affymetrix HG-U133B microarray.
#' @param family The type of model to use when generating the outcome variable.
#' Either `gaussian`, `binomial` or `cox`.
#' @param cor Correlation strength within the data
#' @param cortype Method to use for generating the correlation within the
#' dataset. See below for details.
#' @param noise Amount of noise to add to each predictor
#' @param noisevar Variance of noise
#' @param bias Amount of bias to simulate
#' @param biastype Method to use for generating the bias. See below for details.
#' @return A matrix of size n*p.
#' @examples
#' \dontrun{
#' x <- simulate_dataset(n=100, p=1000, base="HG-U133B")
#' # should return a matrix of size 100*1000 with genes measured by the
#' # HG-U133B microarray as features
#' }
#' @details to be done
simulate_dataset <- function(
n=3,
p=4,
#beta=NULL,
#base="HG-U133B",
#family="gaussian",
#cor=0.5,
#cortype=1,
#noise=1,
#noisevar=1,
#bias=0,
#biastype=1
) {
n=2
p=3
mat <- matrix(,n,p)
matvar <- vector()
for (i in 1:n){
var <- rnorm(p)
mat[i,1:p] <- var
}
return(mat)
}
simulate_dataset()
var <- rnorm(p)
mat[i,1:p] <- var
#' @param bias Amount of bias to simulate
#' @param biastype Method to use for generating the bias. See below for details.
#' @return A matrix of size n*p.
#' @examples
#' \dontrun{
#' x <- simulate_dataset(n=100, p=1000, base="HG-U133B")
#' # should return a matrix of size 100*1000 with genes measured by the
#' # HG-U133B microarray as features
#' }
#' @details to be done
simulate_dataset <- function(
n=3,
p=4,
#beta=NULL,
#base="HG-U133B",
#family="gaussian",
#cor=0.5,
#cortype=1,
#noise=1,
#noisevar=1,
#bias=0,
#biastype=1
) {
mat <- matrix(,n,p)
matvar <- vector()
for (i in 1:n){
var <- rnorm(p)
mat[i,1:p] <- var
}
return(mat)
}
simulate_dataset()
var <- vector()
#' @export
#' @name simulate_dataset
#' @title Simulate a Dataset
#' @description `simulate_dataset()` returns a dataset of size n*p
#' @param n The number of samples.
#' @param p The number of features.
#' @param beta The model coefficients.
#' @param base The dataset to use as basis for the generation, e.g. HG-U133B
#' for mRNA datasets measured with the Affymetrix HG-U133B microarray.
#' @param family The type of model to use when generating the outcome variable.
#' Either `gaussian`, `binomial` or `cox`.
#' @param cor Correlation strength within the data
#' @param cortype Method to use for generating the correlation within the
#' dataset. See below for details.
#' @param noise Amount of noise to add to each predictor
#' @param noisevar Variance of noise
#' @param bias Amount of bias to simulate
#' @param biastype Method to use for generating the bias. See below for details.
#' @return A matrix of size n*p.
#' @examples
#' \dontrun{
#' x <- simulate_dataset(n=100, p=1000, base="HG-U133B")
#' # should return a matrix of size 100*1000 with genes measured by the
#' # HG-U133B microarray as features
#' }
#' @details to be done
simulate_dataset <- function(
n=3,
p=4,
#beta=NULL,
#base="HG-U133B",
#family="gaussian",
#cor=0.5,
#cortype=1,
#noise=1,
#noisevar=1,
#bias=0,
#biastype=1
) {
mat <- matrix(,n,p)
var <- vector()
for (i in 1:n){
var <- rnorm(p)
mat[i,1:p] <- var
}
return(mat)
}
simulate_dataset()
#' @export
#' @name simulate_dataset
#' @title Simulate a Dataset
#' @description `simulate_dataset()` returns a dataset of size n*p
#' @param n The number of samples.
#' @param p The number of features.
#' @param beta The model coefficients.
#' @param base The dataset to use as basis for the generation, e.g. HG-U133B
#' for mRNA datasets measured with the Affymetrix HG-U133B microarray.
#' @param family The type of model to use when generating the outcome variable.
#' Either `gaussian`, `binomial` or `cox`.
#' @param cor Correlation strength within the data
#' @param cortype Method to use for generating the correlation within the
#' dataset. See below for details.
#' @param noise Amount of noise to add to each predictor
#' @param noisevar Variance of noise
#' @param bias Amount of bias to simulate
#' @param biastype Method to use for generating the bias. See below for details.
#' @return A matrix of size n*p.
#' @examples
#' \dontrun{
#' x <- simulate_dataset(n=100, p=1000, base="HG-U133B")
#' # should return a matrix of size 100*1000 with genes measured by the
#' # HG-U133B microarray as features
#' }
#' @details to be done
simulate_dataset <- function(
n=3,
p=4,
#beta=NULL,
#base="HG-U133B",
#family="gaussian",
#cor=0.5,
#cortype=1,
#noise=1,
#noisevar=1,
#bias=0,
#biastype=1
) {
mat <- matrix(,n,p)
var <- vector()
for (i in 1:n){
var <- rnorm(p)
mat[i,1:p] <- var
}
return(mat)
}
simulate_dataset()
var
mat
simulate_dataset <- function(n=3,p=4)
{
mat <- matrix(,n,p)
var <- vector()
for (i in 1:n){
var <- rnorm(p)
mat[i,1:p] <- var
}
return(mat)
}
simulate_dataset()
simulate_dataset()
simulate_dataset <- function(n=1000,p=100)
{
mat <- matrix(,n,p)
var <- vector()
for (i in 1:n){
var <- rnorm(p)
mat[i,1:p] <- var
}
return(mat)
}
simulate_dataset()
dtset <- getGEO(platform='GPL32170')
dtset <- getGEO('GPL32170')
gse_id <- Meta(dtset)$series_id
info_gse <- getGEO(gse_id)
info_gse
varLabels()
Meta(info_gse)
info_gse
Meta(info_gse)
gse_id
info_gse
View(info_gse)
phenoData(info_gse)
pData(gse_id)
info_gse
gse_id$varLabels
gse_id@varLabels
Meta(gse_id)
names(pData(gse_data))
names(pData(gse_id))
eData <- info_gse[[1]]
names(pData(eData))
pData(eData)
pData(eData)$title
list_datasets <- function(pltfrm='GPL32170'){
dtset <- getGEO(pltfrm)
gse_id <- Meta(dtset)$series_id
len <- length(gse_id)
title <- array()
type <- array()
# organism <- array()
platform_id <- array()
#series_id <- array()
data_row_count <- array()
for(i in 1:len){
get_gse_data <- getGEO(gse_id[i])
gse_data <- pData(get_gse_data)
title[i] = gse_data$title
type[i] <- gse_data$type
#organism[i] <- Meta(get_gsm_data)$organism
platform_id[i] <- gse_data$platform_id
#series_id[i] <- Meta(get_gsm_data)$series_id
data_row_count[i] <- gse_data$data_row_count
}
gse_dataframe <- data.frame(
gse = gse_id,
title = title,
type = type,
#organism = organism,
platform = platform_id,
#series_id = series_id,
data_row_count = data_row_count
)
return (gse_dataframe)
}
list_datasets()
list_datasets()
list_datasets <- function(pltfrm='GPL32170'){
dtset <- getGEO(pltfrm)
gse_id <- Meta(dtset)$series_id
len <- length(gse_id)
title <- array()
type <- array()
# organism <- array()
platform_id <- array()
#series_id <- array()
data_row_count <- array()
for(i in 1:len){
get_gse_data <- getGEO(gse_id[i])
eData <- get_gse_data[[1]]
gse_data <- pData(edata)
title[i] = gse_data$title
type[i] <- gse_data$type
#organism[i] <- Meta(get_gsm_data)$organism
platform_id[i] <- gse_data$platform_id
#series_id[i] <- Meta(get_gsm_data)$series_id
data_row_count[i] <- gse_data$data_row_count
}
gse_dataframe <- data.frame(
gse = gse_id,
title = title,
type = type,
#organism = organism,
platform = platform_id,
#series_id = series_id,
data_row_count = data_row_count
)
return (gse_dataframe)
}
list_datasets()
list_datasets <- function(pltfrm='GPL32170'){
dtset <- getGEO(pltfrm)
gse_id <- Meta(dtset)$series_id
len <- length(gse_id)
title <- array()
type <- array()
# organism <- array()
platform_id <- array()
#series_id <- array()
data_row_count <- array()
for(i in 1:len){
get_gse_data <- getGEO(gse_id[i])
eData <- get_gse_data[[1]]
gse_data <- pData(eData)
title[i] = gse_data$title
type[i] <- gse_data$type
#organism[i] <- Meta(get_gsm_data)$organism
platform_id[i] <- gse_data$platform_id
#series_id[i] <- Meta(get_gsm_data)$series_id
data_row_count[i] <- gse_data$data_row_count
}
gse_dataframe <- data.frame(
gse = gse_id,
title = title,
type = type,
#organism = organism,
platform = platform_id,
#series_id = series_id,
data_row_count = data_row_count
)
return (gse_dataframe)
}
list_datasets()
list_datasets <- function(pltfrm='GPL95'){
dtset <- getGEO(pltfrm)
gse_id <- Meta(dtset)$series_id
len <- length(gse_id)
title <- array()
type <- array()
# organism <- array()
platform_id <- array()
#series_id <- array()
data_row_count <- array()
for(i in 1:len){
get_gse_data <- getGEO(gse_id[i])
eData <- get_gse_data[[1]]
gse_data <- pData(eData)
title[i] = gse_data$title
type[i] <- gse_data$type
#organism[i] <- Meta(get_gsm_data)$organism
platform_id[i] <- gse_data$platform_id
#series_id[i] <- Meta(get_gsm_data)$series_id
data_row_count[i] <- gse_data$data_row_count
}
gse_dataframe <- data.frame(
gse = gse_id,
title = title,
type = type,
#organism = organism,
platform = platform_id,
#series_id = series_id,
data_row_count = data_row_count
)
return (gse_dataframe)
}
list_datasets()
?list_datasets()
?list_datasets
setwd("C:/Users/ASUS/simulatr")
devtools::load_all()
rm(list = c("list_datasets", "simulate_dataset"))
?list_datasets
devtools::document()
?list_datasets
?simulate_dataset()
list_platforms("GPL095")
devtools::load_all()
list_datasets("GPL95")
x <- list_datasets("GPL95")
x <- list_platforms()
x
dput(x)
sink("tmp.txt"); dput(x): sink()
sink("tmp.txt"); dput(x): sink(NULL)
sink("tmp.txt"); dput(x); sink(NULL)
test_local()
test_local()
