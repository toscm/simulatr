source("C:/Users/ASUS/OneDrive/Documents/R/analyzeMadsim.R")
simlate_with_MOSim()
simulate_with_madsim()
simlate_with_MOSim()
simulate_with_madsim()
View(rnaseq_simulation)
#' @export
#' @name list_datasets
#' @title List Datasets useable as Base Datasets for Simulations
#' @description `lists_datasets()` returns a list of datasets that can be passed
#' to `simulate_dataset` as basis for the simulation.
#' @param platform e.g. HG-U133B for mRNA datasets measured with the Affymetrix
#' HG-U133B microarray.
#' @param source where to search for datasets.
#' @return A named list of datasets, where each dataset is represented by a list
#' with the following elements:
#' platform: platform specified as parameter
#' n: number of observations in the dataset
#' p: number of features in the dataset
#' download: function to actually download the dataset
#' @examples
#' # to be done
#' @details to be done
#library
library(GEOquery)
#get data for specific platform
getGPLData <- function(gplnum){
# access gpl data
gpl <- getGEO(gplnum)
# create matrix for data of the given platform
a <- c(Meta(gpl)$geo_accession,Meta(gpl)$title,Meta(gpl)$technology,Meta(gpl)$organism,Meta(gpl)$status,Meta(gpl)$contact_institute, Meta(gpl)$sample_count)
matrix <- rbind(a)
colnames(matrix) <- c('GEO Accession', 'Title', 'Technology', 'Organism', 'Status', 'Contact Institute', 'Series ID', 'Number of Samples')
#view matrix
View(matrix)
Table(gpl)[1:5,]
}
getGPLData('GPL32170')
#another important information could be sample_id
Table(gpl)[1:5,]
# access gpl data
gpl <- getGEO(gplnum)
# access gpl data
gpl <- getGEO('GPL96')
Table(gpl)[1:5,]
Table(gpl)[1:5,]$value
View(Table(gpl)[1,])
exprs(gpl)
GPLList()
GPL()
View(gpl)
gpl@header[["web_link"]]
Table(GPLList(gse)[[1]])$ID
pdata(gpl)
Meta(gpl)$gse
Meta(gpl)$series_id[1]
Meta(gpl)$VALUE
meta(gpl)$value
Meta(gpl)$value
exprs(Meta(gpl))
#' @export
#' @name list_datasets
#' @title List Datasets useable as Base Datasets for Simulations
#' @description `lists_datasets()` returns a list of datasets that can be passed
#' to `simulate_dataset` as basis for the simulation.
#' @param platform e.g. HG-U133B for mRNA datasets measured with the Affymetrix
#' HG-U133B microarray.
#' @param source where to search for datasets.
#' @return A named list of datasets, where each dataset is represented by a list
#' with the following elements:
#' platform: platform specified as parameter
#' n: number of observations in the dataset
#' p: number of features in the dataset
#' download: function to actually download the dataset
#' @examples
#' # to be done
#' @details to be done
#library
library(GEOquery)
#get data for specific platform
getGPLData <- function(gplnum='GPL96'){
# access gpl data
gpl <- getGEO('GPL96')
# create matrix for data of the given platform
a <- c(Meta(gpl)$geo_accession,Meta(gpl)$title,Meta(gpl)$technology,Meta(gpl)$organism,Meta(gpl)$status,Meta(gpl)$contact_institute, Meta(gpl)$sample_count)
matrix <- rbind(a)
colnames(matrix) <- c('GEO Accession', 'Title', 'Technology', 'Organism', 'Status', 'Contact Institute', 'Series ID', 'Number of Samples')
#view matrix
View(matrix)
}
getGPLData('GPL32170')
#another important information could be sample_id
getGPLData('GPL32170')
mydata1$xdata
library(httr)
r <- GET("http://httpbin.org/get")
r$headers
r$cookies
r$request
g <- GET("https://www.ncbi.nlm.nih.gov/")
g$all_headers
attr(,"class")$list
g$list
g$content
g$content$list
g$content@list
g$handle
g$cookies
g <- GET("https://www.ncbi.nlm.nih.gov/", verbose())
content(g,raw)
content(g,"raw")
content(g,"text")
content(g,"parse")
content(g,"parse")
r <- GET("http://www.omdbapi.com/?t=frozen")
frozen <- GET(r)
r$date
r$url
frozen <- GET(r)
url <- GET("http://www.omdbapi.com/?t=frozen")
frozen <- GET(url)
details <- content(frozen,"parse")
details$year
url <- GET("http://www.omdbapi.com/?t=frozen")
frozen <- GET(url)
details <- content(frozen,"parse")
details$year
g <- GET("https://www.ncbi.nlm.nih.gov/")
gpllist <-  content(g,"parse")
g <- GET("https://www.ncbi.nlm.nih.gov/geo/browse/?view=platforms")
gpllist <-  content(g,"parse")
g$content
gpllist
gpllist$platform
gpllist$body_id
Meta(gpllist)
gpllist
gpllist$name
rowname(gpllist)
rownames(gpllist)
gpllist$accession
gpllist$node
gpllist$doc
gpllist$class
g$content
g <- GET("https://www.ncbi.nlm.nih.gov/geo/browse/?view=platforms")
g
gplist
gpllist <-  content(g,"parse")
gplist
gpllist <-  content(g,"parse")
gplist
g <- GET("https://www.ncbi.nlm.nih.gov/geo/browse/?view=platforms")
gpllist <-  content(g,"parse")
gplist
g
gplist$description
gpllist <-  content(g,"parse")
gpllist <-  content(g,"text")
gplist$description
gpllist <-  httr::content(g, as = "text", encoding = "UTF-8")
gplist$description
gplist
gpllist <-  httr::content(g, as = "text", encoding = "UTF-8")
gpllist <- content(g, as = "text", encoding = "UTF-8")
gplist
help(paclage = "httr")
help(package = "httr")
gpllist <- content(g, as = "text", encoding = "UTF-8")
gplist
gpllist <- content(g)
gplist
gpllist <- content(g, as = "raw", encoding = "UTF-8")
gplist
gpllist <- content(g, as = "text", encoding = "UTF-8")
gplist
http_error(gpllist)
http_status(gpllist)
http_type(gpllist)
gpllist
gplist$platform
gplist$acc
rnaseq_simulation@totalGenes
rnaseq_simulation@noiseParams
rnaseq_simulation@minMaxFC
rnaseq_simulation@geneNames
rnaseq_simulation@geneNames
rnaseq_simulation@simulators
rnaseq_simulation@profiles
getGEO(GEO = NULL, filename = NULL, destdir = tempdir(), GSElimits=NULL,
GSEMatrix=TRUE,AnnotGPL=FALSE,getGPL=TRUE)
getGEO(GEO = NULL, filename = NULL, destdir = tempdir(),
GSElimits = NULL, GSEMatrix = TRUE, AnnotGPL = FALSE, getGPL = TRUE,
parseCharacteristics = TRUE)
g <- GET("https://www.ncbi.nlm.nih.gov/geo/browse/?view=platforms")
library(httr)
g <- GET("https://www.ncbi.nlm.nih.gov/geo/browse/?view=platforms")
gpllist <- content(g, as = "text", encoding = "UTF-8")
gplist$acc
View(gpllist)
gpllist
g
gpllist <- content(g, as = "html", encoding = "UTF-8")
gpllist
view(gpllist)
View(gpllist)
g
str(content(g))
str(content(gpllist))
gpllist
if (!(“rvest” %in% installed.packages())) {
install.packages(“rvest”)
}
if (!(“dplyr” %in% installed.packages())) {
install.packages(“dplyr”)
}
if (!(“rvest” %in% installed.packages())) {
install.packages(“rvest”)
}
if (!(“dplyr” %in% installed.packages())) {
install.packages(“dplyr”)
}
if (!(“rvest” %in% installed.packages())) {
install.packages(“rvest”)
}
if (!(“dplyr” %in% installed.packages())) {
install.packages(“dplyr”)
}
library(rvest)
library(dplyr)
if (!(“rvest” %in% installed.packages())) {
install.packages(“rvest”)
}
install.packages(“rvest”)
install.packages("rvest")
library(rvest)
str(g)
info <- g %>%
rvest::html_nodes('body') %>%
xml2::xml_find_all("//span[contains(@class, 'title')]") %>%
rvest::html_text()
info <- g %>%
rvest::html_nodes('body') %>%
xml2::xml_find_all("//td[contains(@class, 'title')]") %>%
rvest::html_text()
info <- g %>%
rvest::html_nodes('body') %>%
xml2::xml_find_all("//div[contains(@class, 'title')]") %>%
rvest::html_text()
info <- g %>%
rvest::html_nodes('body') %>%
xml2::xml_find_all("//tbody[contains(@class, 'title')]") %>%
rvest::html_text()
g_html <- read_html(g)
g_html
info <- g_html %>%
rvest::html_nodes('body') %>%
xml2::xml_find_all("//div[contains(@class, 'title')]") %>%
rvest::html_text()
info
info <- g_html %>%
rvest::html_nodes('body') %>%
xml2::xml_find_all("//div[contains(@class, 'platform')]") %>%
rvest::html_text()
info
str(g_html)
info <- g_html %>%
html_element('table')
info
info <- g_html %>%
html_element('table')%>%
html_table()
info
info$Accession
g <- GET("https://www.ncbi.nlm.nih.gov/geo/browse/?view=platforms")
g_html <- read_html(g)
info <- g_html %>%
rvest::html_nodes('body') %>%
xml2::xml_find_all("//div[contains(@class, 'platform')]") %>%
rvest::html_text()
info
info$Accession
g <- GET("https://www.ncbi.nlm.nih.gov/geo/browse/?view=platforms")
str(g)
gpllist <- content(g, as = "text", encoding = "UTF-8")
g_html <- read_html(g)
info <- g_html %>%
rvest::html_nodes('body') %>%
xml2::xml_find_all("//div[contains(@class, 'platform')]") %>%
rvest::html_text()
info
info <- g_html %>%
html_element('table')%>%
html_table()
info$Accession
info <- g_html %>%
html_element('table')%>%
html_table()%>%
html_attr()
info <- g_html %>%
html_element('table')%>%
html_attr()
info <- g_html %>%
html_element('table')%>%
html_table
info$Accession
g <- GET("https://www.ncbi.nlm.nih.gov/geo/browse")
str(g)
gpllist <- content(g, as = "text", encoding = "UTF-8")
g_html <- read_html(g)
info <- g_html %>%
html_element('table')%>%
html_table
info$Accession
g <- GET("https://www.ncbi.nlm.nih.gov/geo/browse")
str(g)
gpllist <- content(g, as = "text", encoding = "UTF-8")
g_html <- read_html(g)
info <- g_html %>%
html_element('table')%>%
html_table
info$Accession
g <- GET("https://www.ncbi.nlm.nih.gov/geo/browse/?view=platforms")
str(g)
gpllist <- content(g, as = "text", encoding = "UTF-8")
g_html <- read_html(g)
info <- g_html %>%
html_element('table')%>%
html_table
info$Accession
#library
library(GEOquery)
#get data for specific platform
getGPLData <- function(gplnum='GPL96'){
# access gpl data
gpl <- getGEO('GPL96')
# create data table for the given platform
a <- c(Meta(gpl)$geo_accession,Meta(gpl)$title,Meta(gpl)$technology,Meta(gpl)$organism,Meta(gpl)$status,Meta(gpl)$contact_institute, Meta(gpl)$sample_count)
dataTable<- rbind(a)
colnames(dataTable) <- c('GEO Accession', 'Title', 'Technology', 'Organism', 'Status', 'Contact Institute', 'Series ID', 'Number of Samples')
#return data table
View(dataTable)
}
getGPLData('GPL32170')
# create data table for the given platform
a <- c(Meta(gpl)$geo_accession,Meta(gpl)$title,Meta(gpl)$technology,Meta(gpl)$organism,Meta(gpl)$status)
dataTable<- rbind(a)
colnames(dataTable) <- c('GEO Accession', 'Title', 'Technology', 'Organism', 'Status', 'Contact Institute', 'Series ID', 'Number of Samples')
#return data table
return(dataTable)
getGPLData('GPL32170')
getGPLData('GPL32170')
colnames(dataTable) <- c('GEO Accession', 'Title', 'Technology', 'Organism', 'Status')
#return data table
return(dataTable)
getGPLData <- function(gplnum='GPL96'){
# access gpl data
gpl <- getGEO('GPL96')
# create data table for the given platform
a <- c(Meta(gpl)$geo_accession,Meta(gpl)$title,Meta(gpl)$technology,Meta(gpl)$organism,Meta(gpl)$status)
dataTable<- rbind(a)
colnames(dataTable) <- c('GEO Accession', 'Title', 'Technology', 'Organism', 'Status')
#return data table
return(dataTable)
}
getGPLData('GPL32170')
platforms[1]
data=read.csv("C:\Users\ASUS\Downloads\platform.csv")
data=read.csv("C:/Users/ASUS/Downloads/platform.csv")
matrixdata = as.matrix(data)
matrixdata
matrixdata[1]
matrixdata[1,1]
matrixdata[,1]
matrixdata[1,1]
matrixdata[,1]
data=read.csv("C:/Users/ASUS/Downloads/platform.csv")
data=read.csv("C:/Users/ASUS/Downloads/platform.csv")
data=read.csv("C:/Users/ASUS/Downloads/platform.csv")
matrixdata = as.matrix(data)
matrixdata[,1]
data=read.csv("C:/Users/ASUS/Downloads/platform.csv")
rm(list=ls())
data=read.csv("C:/Users/ASUS/Downloads/platform.csv")
data=read.csv("D:/Study Materials/Practical Bioinformatics/platform.csv")
data=read.csv("D:/Study Materials/Practical Bioinformatics/platform.csv")
matrixdata = as.matrix(data)
matrixdata[,1]
data=read.csv("D:/Study Materials/Practical Bioinformatics/platform.csv")
matrixdata = as.matrix(data)
matrixdata[,1]
data=read.csv("D:/Study Materials/Practical Bioinformatics/platform.csv")
data=read.csv("C:/Users/ASUS/platform.csv")
getwd()
data=read.csv("C:/Users/ASUS/simulatr/platform.csv")
getwd()
data=read.csv("C:\Users\ASUS\OneDrive\Documents\platform.csv")
data=read.csv("C:/Users/ASUS/OneDrive/Documents/platform.csv")
getwd()
data=read.csv("C:/Users/ASUS/OneDrive/Documents/platform.csv")
data=read.csv("C:/Users/ASUS/Downloads/platform.csv")
matrixdata = as.matrix(data)
matrixdata[,1]
print(matrixdata[1:500,1])
t <- c("a" "b")
array((matrixdata[1:5,1])
c((matrixdata[1:5,1])
print(matrixdata[1:500,1],",")
cat(matrixdata[1:500,1],",")
cat(matrixdata[i,1],",")
for(i in 1:5){
cat(matrixdata[i,1],",")
}
for(i in 1:5){
cat('"',matrixdata[i,1],",")
}
cat('"',matrixdata[i,1],'"',",")
for(i in 1:5){
cat('"',matrixdata[i,1],'"',",")
}
for(i in 1:500){
cat('"',matrixdata[i,1],'"',",")
}
for(i in 501:1000){
cat('"',matrixdata[i,1],'"',",")
}
for(i in 1001:2000){
cat('"',matrixdata[i,1],'"',",")
}
for(i in 2001:2500){
cat('"',matrixdata[i,1],'"',",")
}
for(i in 2500:3500){
cat('"',matrixdata[i,1],'"',",")
}
for(i in 1:5000){
cat('"',matrixdata[i,1],'"',",")
}
matrixdata[,1]
data=read.csv("C:/Users/ASUS/Downloads/platform.csv")
matrixdata = as.matrix(data)
platforms <- matrixdata[,1]
gpl_info <- getGEO(platforms[1])
matrixdata
table(matrixdata)
platform_info <- table(matrixdata)
as.table(matrixdata)
type(matrixdata)
matrixdata$rowvariables
data$Data.Rows
platforms <- data$Accession
platform
platforms
as.table(data)
as.data.frame.table(data)
platform_data <- as.data.frame.table(data)
rownames(platform_data)
colnames(platform_data)
platform_data[,3:5]
platform_data[,3:11]
platform_table <- platform_data[,3:11]
colnames(platform_table)
colnames(platform_table) = c("Platform Number","Title","Technology","Taxonomy","Number of features","Number of datasets","Number of Series","Contact","Release Date")
head(platform_table)
data = read.csv("C:/Users/ASUS/simulatr/instplatform.csv")
platforms <- data$Accession
platform_data <- as.data.frame.table(data)
platform_table <- platform_data[,3:11]
colnames(platform_table) = c("Platform Number","Title","Technology","Taxonomy","Number of features","Number of datasets","Number of Series","Contact","Release Date")
return(platform_table)
data = read.csv("C:/Users/ASUS/simulatr/instplatform.csv")
getwd()
cd simulatr
cd "C:/Users/ASUS/simulatr/inst"
devtools::load?all*()
devtools::load_all()
install.packages('devtools')
library('devtools')
load_all()
dir()
getwd()
setwd("../simulatr")
setwd("../../simulatr")
dir()
load_all*()
load_all()
list_platforms()
dir('C:/Users/ASUS/simulatr/')
load_all()
list_platforms()
x \/ list_platforms()
x =list_platforms()
str(x)
head*data()
head(data)
data = read.csv("C:/Users/ASUS/simulatr/inst/platform.csv")
head(data)
platforms <- data$Accession
platform_data <- as.data.frame.table(data)
head(platform_data)
as.data.frame.table
typeof(data)
class(data)
read.csv("C:/Users/ASUS/simulatr/inst/platform.csv")
x = list_platforms*()
x = list_platforms()
x$Title
grep('Affymetrix', x$Title)
grep('Affymetrix', x$Title, v=T)
system.file("inst/platform.csv", package='simulatr')
devtools::install()
q()
